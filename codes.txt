
docker-compose build builder

docker-compose run --rm builder

docker-compose --profile test up

docker-compose --profile test down

./build/server/telemetry_server 12345 ./server/limits.json

.build/client/telemetry_client localhost 12345

export SOURCE_DIR="./"


0 0 Y5 Y4 Y3 Y2 Y1 Y0 0 0 X5 X4 X3 X2 X1 X0
0 0 S1 S0 0 0 M1 M0 V7 V6 V5 V4 V3 V2 V1 V0 
P7 P6 P5 P4 P3 P2 P1 P0 A7 A6 A5 A4 A3 A2 A1 A0
R15 R14 R13 R12 R11 R10 R9 R8 R7 R6 R5 R4 R3 R2 R1 R0


 "limits": [
        {
            "X": [20, 50],
            "Y": [-12, 15],
            "V": [100, 200],
            "M": [0, 2],
            "S": [1, 3],
            "A": [-8.5, 9.1],
            "P": [60, 90]
        }
    ]
    
{
    "limits": [
        {
            "X": [0, 63],
            "Y": [-32, 31],
            "V": [0, 255],
            "M": [0, 3],
            "S": [0, 3],
            "A": [-12.7, 12.8],
            "P": [0, 130]
        }
    ]
}


constexpr uint64_t ZERO1_MASK = 0x3ULL << 42; // Биты 42-43
constexpr uint64_t ZERO2_MASK = 0x3ULL << 46; // Биты 46-47
constexpr uint64_t ZERO3_MASK = 0x3ULL << 54; // Биты 54-55
constexpr uint64_t ZERO4_MASK = 0x3ULL << 62; // Биты 62-63


std::optional<TelemetryData> unpack_data(uint64_t packet) {

    if (sizeof(packet) != 8) {
        std::cout << "Invalid packet size: expected 8 bytes, got " << sizeof(packet) << " bytes\n";
        return std::nullopt;
    }

    if ((packet & ZERO1_MASK) != 0 ||
        (packet & ZERO2_MASK) != 0 ||
        (packet & ZERO3_MASK) != 0 ||
        (packet & ZERO4_MASK) != 0) {
        
        std::cerr << "Invalid packet: reserved zero bits are non-zero\n";
        return std::nullopt;
    }
    
    TelemetryData data;
    memcpy(&data, &packet, sizeof(data));
    
    return data;
}